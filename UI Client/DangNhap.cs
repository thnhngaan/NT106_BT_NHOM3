using Client;
using Client02;
using System;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Client01
{
    public partial class DangNhap : Form
    {
        public DangNhap()
        {
            InitializeComponent();

            // ·∫®n m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
            ps.UseSystemPasswordChar = true;

            // G·∫Øn s·ª± ki·ªán
            pseye.Click += pseye_Click;
            Button_TaoTK.Click += Button_DangKy_Click;
            Button_DangNhap.Click += Button_DangNhap_Click;
        }

        // N√∫t ƒêƒÉng nh·∫≠p
        private async void Button_DangNhap_Click(object sender, EventArgs e)
        {
            string usernameValue = username.Text.Trim();
            string passwordValue = ps.Text.Trim();

            if (string.IsNullOrEmpty(usernameValue) || string.IsNullOrEmpty(passwordValue))
            {
                MessageBox.Show("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√†i kho·∫£n v√† m·∫≠t kh·∫©u.", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Hash m·∫≠t kh·∫©u tr∆∞·ªõc khi g·ª≠i
            string hashedPassword = hashpassword.ToSHA256(passwordValue);

            try
            {
                string result = await SendLoginRequestAsync(usernameValue, hashedPassword);

                if (result.Equals("Login success", StringComparison.OrdinalIgnoreCase))
                {
                    MessageBox.Show("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", "Th√†nh c√¥ng", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.Hide();
                    new Home(usernameValue).ShowDialog();
                    this.Close();
                }
                else if (result.Equals("Login failed", StringComparison.OrdinalIgnoreCase))
                {
                    MessageBox.Show("‚ùå Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.", "L·ªói ƒëƒÉng nh·∫≠p", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else if (result.StartsWith("Fail"))
                {
                    MessageBox.Show("‚ö†Ô∏è D·ªØ li·ªáu g·ª≠i kh√¥ng h·ª£p l·ªá (server b√°o l·ªói).", "C·∫£nh b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else
                {
                    MessageBox.Show($"Ph·∫£n h·ªìi l·∫° t·ª´ server: {result}", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (SocketException)
            {
                MessageBox.Show("üö´ Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.\nKi·ªÉm tra l·∫°i IP ho·∫∑c port (8080).", "K·∫øt n·ªëi th·∫•t b·∫°i", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói: {ex.Message}", "L·ªói h·ªá th·ªëng", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // G·ª≠i request ƒëƒÉng nh·∫≠p qua TCP
        private async Task<string> SendLoginRequestAsync(string username, string hashedPassword)
        {
            const string serverIp = "192.168.156.1"; // IP server th·∫≠t (gi·ªØ nguy√™n ƒë·ªÉ kh·ªõp code c·ªßa b√™n kia)
            const int serverPort = 8080; // Port login

            using (TcpClient client = new TcpClient())
            {
                await client.ConnectAsync(serverIp, serverPort);

                using (NetworkStream stream = client.GetStream())
                {
                    // Format d·ªØ li·ªáu ƒë√∫ng theo server: username|password
                    string request = $"{username}|{hashedPassword}";
                    byte[] data = Encoding.UTF8.GetBytes(request);
                    await stream.WriteAsync(data, 0, data.Length);

                    // Ch·ªù ph·∫£n h·ªìi t·ª´ server
                    byte[] buffer = new byte[1024];
                    int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                    string response = Encoding.UTF8.GetString(buffer, 0, bytesRead).Trim();

                    return response;
                }
            }
        }

        // N√∫t m·ªü form ƒêƒÉng k√Ω
        private void Button_DangKy_Click(object sender, EventArgs e)
        {
            this.Hide();
            new DangKy().ShowDialog();
            this.Close();
        }

        // N√∫t ·∫©n/hi·ªán m·∫≠t kh·∫©u
        private void pseye_Click(object sender, EventArgs e)
        {
            ps.UseSystemPasswordChar = !ps.UseSystemPasswordChar;
        }

        private void DangNhap_Load(object sender, EventArgs e)
        {
            // C√≥ th·ªÉ ƒë·ªÉ tr·ªëng
        }
    }
}
